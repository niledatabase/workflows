name: Build multi-arch images

on:
  workflow_call:
    inputs:
      dockerfile:
        required: false
        default: Dockerfile
        type: string
      oci_repository:
        required: false
        type: string
        default: ghcr.io/${{ github.repository }}
      context:
        required: false
        type: string
        default: "."
      image-metadata-tags:
        required: false
        type: string
        default: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}}
          type=sha
      image-build-args:
        required: false
        type: string
      image-target:
        required: false
        type: string

    outputs:
      digest:
        description: "Digest of the built image"
        value: ${{ jobs.merge.outputs.digest }}
      version:
        description: "Version of the built image"
        value: ${{ jobs.merge.outputs.version }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      uuid: ${{ steps.uuid.outputs.uuid }}
    steps:
      - name: Generate UUID for a unique artifact prefix within workflow
        id: uuid
        run: echo "uuid=$(uuidgen)" >> $GITHUB_OUTPUT
  build:
    needs: [ setup ]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - docker_platform: linux/arm64
            runner: full-ubuntu-arm-4-core
          - docker_platform: linux/amd64
            runner: ubuntu-latest-4core
    runs-on: ${{ matrix.platform.runner }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: get cache settings for docker
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: docker-cache
        run: |
          default_branch=$(gh api repos/${{ github.repository}} --jq .default_branch)
          
          # Try finding the branch we're on
          branch=""
          
          if [[ "${{ github.ref_type }}" == "branch" ]]; then
            branch=${{ github.ref_name }}
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            branch=$(git branch -r --contains ${{ github.sha}} --format "%(refname:short)" | grep -v "HEAD" | grep -v '^origin$' | head -n 1 | sed 's/origin\///')
          fi
          
          if [[ -z "$branch" ]]; then
            echo "Could not determine branch, using default branch $default_branch"
            branch=$default_branch
          fi
          
          cache_to="type=registry,ref=${{ inputs.oci_repository }}:cache-${{ matrix.platform.runner }}-${branch},mode=max"
          cache_from="type=registry,ref=${{ inputs.oci_repository }}:cache-${{ matrix.platform.runner }}-${branch}"
          
          if [[ "$branch" != "$default_branch" ]]; then
            cache_from+=$'\n'"type=registry,ref=${{ inputs.oci_repository }}:cache-${{ matrix.platform.runner }}-${default_branch}"
          fi
          
          echo "cache_from<<EOF" >> $GITHUB_OUTPUT
          echo "$cache_from" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "cache_to<<EOF" >> $GITHUB_OUTPUT
          echo "$cache_to" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "cache_from:${cache_from}"
          echo "cache_to:${cache_to}"

      - name: Get Git commit timestamps
        run: echo "TIMESTAMP=$(git log -1 --pretty=%ct)" >> $GITHUB_ENV

      - name: Prepare
        run: |
          platform=${{ matrix.platform.docker_platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ inputs.oci_repository }}

      - name: Log into registry ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "us-west-2"
          role-to-assume: arn:aws:iam::483388953608:role/github-role-Role-MIMIOJ3EPX6V

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: 483388953608.dkr.ecr.us-west-2.amazonaws.com

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        env:
          SOURCE_DATE_EPOCH: ${{ env.TIMESTAMP }}
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: ${{ matrix.platform.docker_platform }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: ${{ inputs.image-build-args }}
          target: ${{ inputs.image-target }}
          provenance: false
          cache-from: ${{ steps.docker-cache.outputs.cache_from }}
          cache-to: ${{ steps.docker-cache.outputs.cache_to }}
          outputs: type=image,"name=${{ inputs.oci_repository }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ needs.setup.outputs.uuid }}-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.inspect.outputs.digest }}
      version: ${{ steps.meta.outputs.version }}
    needs:
      - setup
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-${{ needs.setup.outputs.uuid }}-*
          merge-multiple: true

      - name: Log into registry ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ inputs.oci_repository }}
          tags: ${{ inputs.image-metadata-tags }}
      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ inputs.oci_repository }}@sha256:%s ' *)

      - name: Inspect image
        id: inspect
        run: |
          docker buildx imagetools inspect ${{ inputs.oci_repository }}:${{ steps.meta.outputs.version }}
          digest=$(docker buildx imagetools inspect ${{ inputs.oci_repository }}:${{ steps.meta.outputs.version }} --format "{{json .Manifest}}" | jq -r '.digest')
          echo "digest=${digest}" >> $GITHUB_OUTPUT
